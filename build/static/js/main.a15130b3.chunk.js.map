{"version":3,"sources":["components/Dashboard/Message.js","components/Dashboard/ConnectionMessage.js","components/Dashboard/MessageCont.js","components/Dashboard/SendMessageForm.js","components/Main/Main.js","components/Header/Header.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Message","_ref","messageBlock","message","user","from","react_default","a","createElement","className","Chip","color","label","concat","ConnectionMessage","connect","ChatEnd","React","createRef","scrolling","current","scrollIntoView","block","MessageCont","messages","useEffect","listItems","length","map","Dashboard_Message","key","id","Dashboard_ConnectionMessage","ref","defaultProps","time","useStyles","makeStyles","theme","button","margin","spacing","input","display","SendMessageForm","changeName","_ref$user","sendMessage","_React$useState","useState","_React$useState2","Object","slicedToArray","text","changeTextMess","classes","TextField","onChange","e","name","target","value","trim","Button","type","variant","onClick","Main","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_websocket","state","bind","assertThisInitialized","getNameFromStorage","connecting","_this2","WebSocket","onopen","console","log","setState","onmessage","mess","JSON","parse","data","toConsumableArray","onclose","setTimeout","connectServer","newName","localStorage","getItem","arguments","undefined","setItem","stringify","send","_this$state","Dashboard_MessageCont","userName","Dashboard_SendMessageForm","Component","Header","Footer","href","App","Fragment","components_Header_Header","components_Main_Main","components_Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a15130b3.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Chip from '@material-ui/core/Chip';\nimport '../Styles/MyMsgStyle.css';\n\nconst Message = ({ messageBlock, user }) => {\n    const { message, from } = messageBlock;\n\n    return (\n        <div className='msgWrapper'>\n            <div className='yourMess'>\n                <Chip color=\"primary\" label={`${from}`} />\n                <div className='msg'>{message}</div>\n            </div>\n        </div>\n    );\n};\n\nMessage.propTypes = {\n    user: PropTypes.string.isRequired,\n    messageBlock: PropTypes.shape({\n        from: PropTypes.string,\n        message: PropTypes.string,\n        id: PropTypes.string,\n        time: PropTypes.number,\n    }).isRequired,\n};\n\nexport default Message;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ConnectionMessage = ({ connect }) => {\n    return !connect ? <div>Waiting for Connection...</div> : null;\n};\n\nConnectionMessage.propTypes = {\n    connect: PropTypes.bool.isRequired,\n};\n\nexport default ConnectionMessage;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Message from '../Dashboard/Message';\nimport ConnectionMessage from '../Dashboard/ConnectionMessage';\n\nimport '../Styles/MainStyle.css';\n\nconst ChatEnd = React.createRef();\nconst scrolling = () => ChatEnd.current.scrollIntoView({ block: 'nearest' });\n\nconst MessageCont = ({ messages, user, connect }) => {\n    useEffect(scrolling);\n\n    const listItems = ( messages.length === 0 ) ? <div> No messages </div> :\n    (\n        messages.map( (message) => (\n            <Message\n                key={message.id}\n                messageBlock={message}\n                user={user}\n            />\n        ))\n    );\n\n    return (\n        <div className='listWrapper'>\n            <ConnectionMessage connect={connect}/>\n            {listItems}\n            <p ref={ChatEnd} />\n        </div>\n    );\n};\n\nMessageCont.propTypes = {\n    user: PropTypes.string.isRequired, \n    messages: PropTypes.arrayOf(PropTypes.object),\n    connect: PropTypes.bool.isRequired\n};\n\nMessageCont.defaultProps = {\n    user: 'user',\n    messages: [\n        {\n            time: 70,\n            id: '00',\n            from: 'user',\n            message: 'no messages',\n        },\n    ],\n};\n\nexport default MessageCont;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport '../Styles/MainStyle.css'\n\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        margin: theme.spacing(1),\n    },\n    input: {\n        display: 'none',\n    },\n}));\n\nconst SendMessageForm = ({ changeName, user = 'user', sendMessage }) => {\n    const [text, changeTextMess] = React.useState('');\n    const classes = useStyles();\n\n    const sendMessageHandler = () => {\n        if (!text) return;\n        const message = {\n            from: `${user}`,\n            message: `${text}`,\n        };\n        sendMessage(message);\n        changeTextMess('');\n    };\n\n    const changeUserName = (e) => {\n        const name = e.target.value.trim();\n        if (!name) return;\n        changeName(name);\n    };\n\n    return (\n        <div className='fieldWrapper'>\n            <TextField id=\"standard-name\" margin=\"normal\"\n                onChange={changeUserName}\n                value={user}\n                label=\"Name\"\n            />\n            <TextField id=\"standard-name\" margin=\"normal\"\n                onChange={ (e) => changeTextMess(e.target.value) }\n                value={text}\n                label='Write a message...'\n            />\n            <div>\n                <Button color=\"primary\" className={classes.button} type=\"submit\"\n                    variant=\"contained\"\n                    onClick={sendMessageHandler}\n                > SEND </Button>\n            </div>\n        </div>\n    );\n};\n\nSendMessageForm.propTypes = {\n    user: PropTypes.string,\n    changeName: PropTypes.func.isRequired,\n    sendMessage: PropTypes.func.isRequired,\n};\n\nexport default SendMessageForm;\n","import React from 'react';\r\nimport MessageCont from '../Dashboard/MessageCont';\r\nimport SendMessageForm from '../Dashboard/SendMessageForm'\r\nimport '../Styles/MainStyle.css';\r\n\r\n\r\nclass Main extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this._websocket = null;\r\n        this.state = {\r\n            connect: false,\r\n            messages: [],\r\n            user: 'user',\r\n        };\r\n\r\n        this.changeName = this.changeName.bind(this);\r\n        this.getNameFromStorage = this.getNameFromStorage.bind(this);\r\n        this.sendMessage = this.sendMessage.bind(this);\r\n        this.connecting = this.connecting.bind(this);\r\n\r\n        this.connecting();\r\n    }\r\n\r\n    connecting() {\r\n        this._websocket = new WebSocket('ws://st-chat.shas.tel');\r\n        this._websocket.onopen = () => {\r\n            console.log('open');\r\n            this.setState({ connect: true });\r\n            this.getNameFromStorage();\r\n        }\r\n        this._websocket.onmessage = (e) => {\r\n            const mess = JSON.parse(e.data);\r\n            this.setState((state) => ({\r\n                messages: [...state.messages, ...mess],\r\n            }));\r\n        };\r\n        this._websocket.onclose = () => {\r\n            console.log('close');\r\n            this.setState({ messages: [] });\r\n            this.setState({ connect: false });\r\n            setTimeout(this.connectServer(), 5000);\r\n        };\r\n    }\r\n\r\n    getNameFromStorage() {\r\n        const newName = JSON.parse(localStorage.getItem('name'));\r\n        if (newName) this.changeName(newName);\r\n    }\r\n\r\n    changeName(newName = 'user') {\r\n        localStorage.setItem('name', JSON.stringify(newName));\r\n        this.setState({ user: newName });\r\n    }\r\n\r\n    sendMessage(message) {\r\n        this._websocket.send(JSON.stringify(message));\r\n    }\r\n\r\n    render() {\r\n        const { messages, user, connect } = this.state;\r\n        return (\r\n            <main className='main'>\r\n                <MessageCont messages={messages} userName={user} connect={connect}/>\r\n                <SendMessageForm\r\n                    user={user}\r\n                    changeName={this.changeName}\r\n                    sendMessage={this.sendMessage}\r\n                />\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;\r\n\r\n","import React from 'react';\r\n\r\nimport '../Styles/HeaderStyle.css';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className='header'>\r\n            <h1>myChat</h1>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nimport FooterStyle from '../Styles/FooterStyle.css'\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <div>\r\n              <a className='link' href='https://github.com/cqxg'>Copyright by CQXG Media</a>\r\n            </div>\r\n        </footer>\r\n    );\r\n};\r\n\r\nexport default Footer;","import React from 'react';\nimport Main from './components/Main/Main';\nimport Header from './components/Header/Header';\nimport Footer from './components/Footer/Footer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n        <Header /> \n        <Main />\n        <Footer />\n    </> \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}